<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>jackson</title>
        <link>https://algebra2k.github.io/</link>
        <description></description>
        <generator>Hugo 0.91.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>jackson.cloudnative@gmail.com (jackson)</managingEditor>
        
        
            <webMaster>jackson.cloudnative@gmail.com (jackson)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Wed, 26 Jan 2022 14:21:16 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://algebra2k.github.io/rss.xml" />
        
        
            <item>
                <title>如何阅读论文</title>
                <link>https://algebra2k.github.io/posts/how-reading-paper/</link>
                <guid isPermaLink="true">https://algebra2k.github.io/posts/how-reading-paper/</guid>
                <pubDate>Fri, 17 Jul 2020 00:00:00 &#43;0000</pubDate>
                
                    <author>jackson.cloudnative@gmail.com (jackson)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2000/0*sO7_Eos7OpKMG09X.jpg&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;吴恩达教你如何读论文，高效了解新领域。&lt;/p&gt;
&lt;p&gt;就算是博士，也很难对所有的关键技术都参透了解。那么如何有效了解一个新领域，是研究者们必备的一项技能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-f9a97b2c2de4097ef683c61d2fa660c6_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;最近，一位博主就亲身示范了吴恩达的方法，在Medium上，两天即获得&lt;strong&gt;1.7k&lt;/strong&gt;赞。&lt;/p&gt;
&lt;p&gt;方法具体如何呢？我们就以「姿态估计」这一技术为例，来介绍一下这个方法吧。&lt;/p&gt;
&lt;h2 id=&#34;系统阅读论文集&#34;&gt;系统阅读论文集&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/4032/1*1njy2NQmw863I5n4unTfJA.jpeg&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;既然有了目标，&lt;strong&gt;第一步&lt;/strong&gt;收集资源，并整合起来。&lt;/p&gt;
&lt;p&gt;论文、博客文章、GitHub资源库、视频……在谷歌上搜索「姿态估计」这个词，得到所有关于这个关键词的资源都要整理下来。&lt;/p&gt;
&lt;p&gt;这一阶段，资源数量是没有限制的。只要是你认为重要的资料都可以整理，但要注意，一定要创建一个有用的论文、视频和文章的&lt;strong&gt;短名单&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;，将你认为的与主题相关的任何资源进行深入研究。&lt;/p&gt;
&lt;p&gt;这时候，你可以绘制一张表格。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1297/1*2MdLq0zisYQAikdZRbL1FQ.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;对每种资源的理解程度，做一个实时的跟踪。&lt;/p&gt;
&lt;p&gt;具体来讲，最好的方式就是对所有你收集到的资源都有一个**10%～20%**的理解程度。&lt;/p&gt;
&lt;p&gt;这样，就确保你已经对你所收集到的资源，有了足够的了解，并且还能准确的评估其相关性。&lt;/p&gt;
&lt;p&gt;很好，你已经对这项技术基本入门了。&lt;/p&gt;
&lt;p&gt;更进一步，仔细研读&lt;strong&gt;相关程度更高&lt;/strong&gt;的文章资源。这时候，就出现了一个问题，大概多少论文足够了呢？&lt;/p&gt;
&lt;p&gt;吴恩达说：对&lt;strong&gt;5～20篇&lt;/strong&gt;的论文的理解，那么就说明你对这个领域以及研究进展有了基本的了解。&lt;/p&gt;
&lt;p&gt;如果研读到了&lt;strong&gt;50～100篇&lt;/strong&gt;，那么已经非常了解这个领域了。&lt;/p&gt;
&lt;p&gt;这时候，你的表格可能是这样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1281/1*9cYDHnFlU6GMg6izDW2MXw.png&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果可以的话，还可以做一下笔记，用自己的话总结论文当中的关键发现、技术和研究。&lt;/p&gt;
&lt;h2 id=&#34;论文至少要看三遍&#34;&gt;论文至少要看三遍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/5957/1*H2ZxGrI-8XZHoS5Df40i1Q.jpeg&#34; alt=&#34;Image for post&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来，就集中介绍一下如何研究一篇论文。&lt;/p&gt;
&lt;p&gt;吴恩达认为，要理解一篇论文，一次将一篇论文从第一个字读到最后一个字，可能并不是最佳方式。&lt;/p&gt;
&lt;p&gt;正确的打开方式是，一篇论文至少要&lt;strong&gt;看三遍&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一遍&lt;/strong&gt;，仔细阅读论文中的标题、摘要和关键词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二遍&lt;/strong&gt;，阅读文中的导言、结论以及图表，快速扫描一下论文剩下的内容。&lt;/p&gt;
&lt;p&gt;这一步主要是要把握论文中的&lt;strong&gt;关键信息&lt;/strong&gt;，不光是导言和结论，还包括文章中任何小结论的总结，文中涉及的补充信息都跳过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三遍&lt;/strong&gt;，阅读论文的整个部分，但是要跳过任何可能陌生看不懂的数学公式，技术术语。&lt;/p&gt;
&lt;p&gt;不过，如果你需要对这个专业领域有一个「深入」的理解，那就必须要搞懂那些公式术语了。&lt;/p&gt;
&lt;h2 id=&#34;问自己问题&#34;&gt;问自己问题&lt;/h2&gt;
&lt;p&gt;如何检测你对这篇文章的关键信息有了基本的了解？问自己问题吧！&lt;/p&gt;
&lt;p&gt;吴恩达提供了一系列的问题，在阅读的时候询问自己。这里就摘取一部分。&lt;/p&gt;
&lt;p&gt;1、Describe what the authors of the paper aim to accomplish, or perhaps did achieve.这篇论文作者的目标是什么，或者也许已经实现了什么。&lt;/p&gt;
&lt;p&gt;2、If a new approach/technique/method was introduced in a paper, what are the key elements of the newly proposed approach?如果文中引入了一种新方法/技术，那么这一新提出的方法/技术的关键要素是什么？&lt;/p&gt;
&lt;p&gt;3、What content within the paper is useful to you?论文中，有哪些内容对你有用。&lt;/p&gt;
&lt;p&gt;4、What other references do you want to follow?你还想关注哪些参考资料/文献？&lt;/p&gt;
&lt;p&gt;此外，还分享了一些有用的在线资源。&lt;/p&gt;
&lt;p&gt;The Machine Learning Subreddit：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/MachineLearning/The&#34;&gt;https://www.reddit.com/r/MachineLearning/The&lt;/a&gt; Deep Learning Subreddit：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/deeplearning/Paper&#34;&gt;https://www.reddit.com/r/deeplearning/Paper&lt;/a&gt; With Code：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//paperswithcode.com/Research&#34;&gt;https://paperswithcode.com/Research&lt;/a&gt; Gate：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//www.researchgate.net/&#34;&gt;https://www.researchgate.net/&lt;/a&gt;还有一些顶级会议，比如NIPS、ICML、ICLR…&lt;/p&gt;
&lt;p&gt;不过，吴恩达也强调：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn steadily rather than short burst for longevity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;稳扎稳打，而不是短时的突击，才能长久的学习。这不光是对机器学习领域，还对整个学术领域有益。&lt;/p&gt;
&lt;p&gt;这位博主根据吴恩达的方法，每个月至少阅读四篇论文，来达到理解的目的。&lt;/p&gt;
&lt;p&gt;吴恩达他自己也在视频里说，他就随身携带着一批论文，有时间就拿出来研读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-57390f8f8e8b2ab998e2221cc8b5d694_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;希望这个方法对你有所帮助～如果你有很好的学习论文的方法，也欢迎跟我们分享。&lt;/p&gt;
&lt;p&gt;博文链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//towardsdatascience.com/how-you-should-read-research-papers-according-to-andrew-ng-stanford-deep-learning-lectures-98ecbd3ccfb3&#34;&gt;https://towardsdatascience.com/how-you-should-read-research-papers-according-to-andrew-ng-stanford-deep-learning-lectures-98ecbd3ccfb3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D733m6qBH-jI&#34;&gt;https://www.youtube.com/watch?v=733m6qBH-jI&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://algebra2k.github.io/tags/%E5%AD%A6%E4%B9%A0/">学习</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CMU 15/445 Notes: 14. Query Planning &amp; Optimizer I</title>
                <link>https://algebra2k.github.io/posts/cmu-15445-query-planning-optimizer-1/</link>
                <guid isPermaLink="true">https://algebra2k.github.io/posts/cmu-15445-query-planning-optimizer-1/</guid>
                <pubDate>Sat, 25 Jan 2020 00:00:00 &#43;0000</pubDate>
                
                    <author>jackson.cloudnative@gmail.com (jackson)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;SQL 是声明式 (declarative) 的. 这意味这用户告诉 DBMS 想要的结果而不是如何获得结果. 因此 DBMS 需要把一个 SQL 语句 (SQL statement) 翻译成可执行的查询计划 (Query Plan). 但是, 存在多种不同的方式执行查询计划 (e.g. join 算法), 并且这些算法之间存在差异. 因此, DBMS 需要为查询挑选一个 ”最佳“ 计划. 这就是 DBMS 优化器 (optimizer) 的工作.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL语句的一大特色是只说明了what the data you want to return, 但没定义how to get those data. 对于返回给用户的数据，sql并没有给出执行策略。这就好比，sql只指出要从北京到上海，但并没有告诉你怎么去。这和面向过程的高级编程语言有本质的区别，sql只有目标没有过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SQL = scheduler + parser + optimizer + executor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;存在两种类型的优化策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(启发式/规则)  Heuristics/Rule: 通过重写查询以消除低效率的语句. 不需要成本模型 (cost model)&lt;/li&gt;
&lt;li&gt;基于成本的搜索 (Cost-based Search): 使用成本模型来评估多个相同的计划 (equivalent plan), 并选择成本最小的那个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查询优化器是普通数据库和高端数据库的分水岭.&lt;/p&gt;
&lt;h2 id=&#34;ibm-system-r&#34;&gt;IBM System R&lt;/h2&gt;
&lt;p&gt;首次实现查询优化是在1970年&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人们总是争论说,  DBMS永远不可能选择一个比人写的更好的查询计划&lt;/li&gt;
&lt;li&gt;类似的争论还存在早期的编译器上, 人们也认为编译器无法生成比人类手写的更好的机器码, 事实上今天来看, 编译器做的更好, 数据库优化器也同理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;许多来自 IBM System R 优化器的概念和设计决策至今仍在使用。&lt;/p&gt;
&lt;h3 id=&#34;architecture-overview&#34;&gt;Architecture Overview&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用发送 SQL query 到 Parser, 通常存在一个可选的 SQL Rewriter, 有一些规则以某些方式重写 SQL, 例如将SQL分发到不同的Server (通常被实现在数据库中间件或代理). 或者对 SQL 增加一些注释.&lt;/li&gt;
&lt;li&gt;Parser  得到 token, lexer, 没什么特别的东西 (你只需要学一些编译原理相关的东西), Parser 将 SQL 转换为活动语法树&lt;/li&gt;
&lt;li&gt;抽象语法树 AST 到 Binder,  binder负责将 SQl查询引用的命名对象转换为内部的标识符&lt;/li&gt;
&lt;li&gt;Binder 查询 System catalog, 例如查询一个表的一些信息&lt;/li&gt;
&lt;li&gt;Logical Plan 表示 SQL 想要做什么, 例如scan table, join 两个 table&lt;/li&gt;
&lt;li&gt;Tree Rewriter 查询 System catalog, 可以基于静态规则对语法树重写, 重写后的 Logical Plan 发给优化器, 这一步通常是可选的&lt;/li&gt;
&lt;li&gt;优化器像是一个黑魔法的匣子, 使用成本模型或者启发式的规则对Logical Plan 进行优化, 优化器将输出一个用于执行的 Physical Plan.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;query-optimization&#34;&gt;Query Optimization&lt;/h2&gt;
&lt;p&gt;Heuristics / Rules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写查询以降低愚蠢的 (stupid) / 效率低下 (inefficient) 的查询&lt;/li&gt;
&lt;li&gt;该技术可能需要额外的 catalog, 但不需要额外的数据.
&lt;ul&gt;
&lt;li&gt;需要 system catalog 告诉我们数据库是什么样子, 表是什么样子, 数据包是什么样子&lt;/li&gt;
&lt;li&gt;catalog 是关于数据的元数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cost-based Search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用模型去度量计划执行的成本&lt;/li&gt;
&lt;li&gt;存在多个等价的查询计划时, 选择成本最低的那个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;query-optimization-is-np-hard&#34;&gt;Query Optimization is NP-HARD&lt;/h3&gt;
&lt;p&gt;在进入优化器的细节之前, 我想说这是构建 DBMS 最困难的部分。&lt;/p&gt;
&lt;p&gt;如果你擅长这一点，你会得到$$$。&lt;/p&gt;
&lt;p&gt;人们开始考虑使用 ML 来提高优化器的准确性和效率。&lt;/p&gt;
&lt;p&gt;我正在扩展 Advanced DB Systems 课程以更详细地涵盖该主题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化器是非常重要也非常困难的问题, 如果你了解它, 你可以立即找到工作
Andy 说很多做数据库的公司试图寻找 PL, 高能物理学家来做数据库优化器的工作, 但都没有很好的效果.
IBM 2000 年就开始尝试机器学习结合优化器 &lt;a href=&#34;https://ieeexplore.ieee.org/document/5386840&#34;&gt;Leo&lt;/a&gt; 项目, 但效果很差.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;logical-vs-physical-plans&#34;&gt;Logical VS. Physical Plans&lt;/h3&gt;
&lt;p&gt;优化器 (optimizer) 在最优的情况下, 会为逻辑代数表达式 (logical algebra expression)  生成等价的物理代数表达式 (physical algebra expression).&lt;/p&gt;
&lt;p&gt;物理运算符 (physical operator) 使用访问路径 (access path) 定义特定的执行策略 (execution strategy)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们可以依赖于它们处理的数据的物理格式（即排序、压缩）&lt;/li&gt;
&lt;li&gt;逻辑和物理映射不总是1:1的.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逻辑代数表达式和物理代数表达式的区别是物理代数表达式是最终要执行的查询计划, 由优化器生成.&lt;/p&gt;
&lt;h2 id=&#34;relational-algebra-equivalences&#34;&gt;Relational Algebra Equivalences&lt;/h2&gt;
&lt;p&gt;如果两个关系代数表达式可以生成相同的元组集合 (set of tuples), 则它们是等价的 (equivalent).&lt;/p&gt;
&lt;p&gt;DBMS 可以在没有成本模型的情况下识别更好的查询计划.&lt;/p&gt;
&lt;p&gt;这通常成为查询重写 (query rewriting).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Selections&lt;/strong&gt; 重写**:**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;尽早执行过滤 (filters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新排序谓词, 以便 DBMS 首先应用最具有选择性的谓词 (predicate)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分解一个复杂的谓词 (predicate) , 然后下推 (push down)&lt;/p&gt;
&lt;p&gt;$$
\sigma_{p_1 \land p_2 \land...p_n}(R) = \sigma_{p_1}(\sigma_{p_2}(...\sigma_{p_n}(R)))
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简化复杂的谓词 (predicate)&lt;/p&gt;
&lt;p&gt;$$
(X=Y \land Y=3) \to X=3 \land Y=3
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Projections:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽早执行它们以创建更小的元组 (tuples) 并减少中间结果 (如果消除了重复)&lt;/li&gt;
&lt;li&gt;Projection 除请求之外的所有属性 (e.g. joining keys)&lt;/li&gt;
&lt;li&gt;对列存储来说不重要......&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Joins:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可交换, 关联 (Commutative, associative)&lt;/p&gt;
&lt;p&gt;$$
R\Join S = S \Join R \
(R\Join S)\Join T = R \Join (S \Join T)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;n路 (n-way) Join 有多少种不同的顺序?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Catalan_number&#34;&gt;卡特兰数 (Catalan number)&lt;/a&gt; $\approx 4^n$&lt;/p&gt;
&lt;p&gt;枚举所有可能会非常慢&lt;/p&gt;
&lt;p&gt;稍后我们将看到优化器如何限制搜索空间...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;predicate-pushdown&#34;&gt;Predicate PushDown&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enrolled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;逻辑代数表达式:  $\pi_{name,cid}(\sigma_{grade=&#39;A&#39;}(student \Join enrolled))$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%201.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;$$
\pi_{name,cid}(\sigma_{grade=&#39;A&#39;}(student \Join enrolled))
\ = \
\pi_{name,cid}(student \Join (\sigma_{grade=&#39;A&#39;}(enrolled)))
$$&lt;/p&gt;
&lt;h2 id=&#34;projection-pushdown&#34;&gt;Projection PushDown&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enrolled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%202.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如这里有 1000 行数据, 通过下推 projection, 去掉了 998 行不需要的列&lt;/p&gt;
&lt;p&gt;这在分布式数据库中非常常见, 因为我们想在通过网络发送数据之前尽可能多的删除&lt;/p&gt;
&lt;h2 id=&#34;logical-query-optimization&#34;&gt;Logical Query Optimization&lt;/h2&gt;
&lt;p&gt;使用模式匹配规则 (pattern matching rules) 将逻辑机会转换为等价的逻辑计划.&lt;/p&gt;
&lt;p&gt;目标是增加在搜索过程中枚举最优计划的可能性.&lt;/p&gt;
&lt;p&gt;无法比较计划, 因为没有成本模型, 但是可以将转换 “引导” (direct) 到优选的那个.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拆分连接谓词 (Split Conjunctive Predicates)&lt;/li&gt;
&lt;li&gt;谓词下推 (Predicates Pushdown)&lt;/li&gt;
&lt;li&gt;用连接替换笛卡尔积 (Replace Cartesian Products with Joins)&lt;/li&gt;
&lt;li&gt;投影下推 (Projection Pushdown)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;split-conjunctive-predicates&#34;&gt;Split Conjunctive Predicates&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ARTIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ARTIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;APPEARS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ALBUM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ARTIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;APPEARS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ARTIST_ID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;APPEARS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ALBUM_ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ALBUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ALBUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Andy&amp;#39;s OG Remix&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%203.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分别查询了 ARTIST, APPEARS, ALBUM 三个表&lt;/li&gt;
&lt;li&gt;通过两次 Join 得到输出结果后在应用谓词&lt;/li&gt;
&lt;li&gt;但这不是一种好的方式...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;predicate-pushdown-1&#34;&gt;Predicate Pushdown&lt;/h3&gt;
&lt;p&gt;可以将谓词分解为最简单的形势, 使优化器更容器移动它们.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%204.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里分解了谓词, 然后在笛卡尔积之后, 将谓词下推到查询计划的底部, 这个过程叫谓词下推 (Predicate Pushdown).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%205.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;replace-cartesian-products&#34;&gt;Replace Cartesian Products&lt;/h3&gt;
&lt;p&gt;使用 join 谓词将笛卡尔积替换为内部连接.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%206.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;projection-pushdown-1&#34;&gt;Projection Pushdown&lt;/h3&gt;
&lt;p&gt;在 pipeline 中断之前减少冗余属性以降低查询成本. 这里, ARTIST 表只需要 &lt;code&gt;[ID.NAME](http://ID.NAME)&lt;/code&gt; 属性, APPEARS 表只需要 &lt;code&gt;ARTIST_ID&lt;/code&gt; 和 &lt;code&gt;ALBUM_ID&lt;/code&gt; 属性, 因此在进入连接之前, 可以将投影下推以减少冗余属性, 降低成本. 对于 ALBUM 表也是类似的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%207.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;nested-sub-queries&#34;&gt;Nested Sub-Queries&lt;/h2&gt;
&lt;p&gt;DBMS 将 where 子句中的嵌套子查询看作一个接受参数并返回单个或一组值的函数.&lt;/p&gt;
&lt;p&gt;两种优化方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写达到 de-correlate 或 flatten 它们的目的&lt;/li&gt;
&lt;li&gt;分解嵌套查询并将结果存储到临时表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rewrite&#34;&gt;Rewrite&lt;/h3&gt;
&lt;p&gt;这个例子将嵌套自查询 flatten 了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%208.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;decompose&#34;&gt;Decompose&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%209.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个查询的意思是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于每个评分最高的水手（在所有水手中）和至少两次预订红船，找到水手 ID 和水手预订红船的最早日期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于较难的查询，优化器将查询分解为块，然后一次集中处理一个块。&lt;/p&gt;
&lt;p&gt;子查询被写入临时表，在查询完成后被丢弃。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2010.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2011.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2012.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2013.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2014.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里将 &lt;code&gt;(SELECT MAX (S2.rating) FROM sailors S2)&lt;/code&gt; 作为一个嵌套块&lt;/li&gt;
&lt;li&gt;然后将 &lt;code&gt;SELECT MAX (S2.rating) FROM sailors S2&lt;/code&gt; 单独提取了出来作为独立的块&lt;/li&gt;
&lt;li&gt;之后执行这个块, 查询数据写入临时表, 最终的查询与这个临时的表进行谓词连接&lt;/li&gt;
&lt;li&gt;对于谓词连接可以按照谓词下推的方式尝试优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;expression-rewriting&#34;&gt;Expression Rewriting&lt;/h3&gt;
&lt;p&gt;优化器将查询的表达式（例如，WHERE 谓词子句）转换为最优/最小的表达式集&lt;/p&gt;
&lt;p&gt;使用 if/then/else 子句或模式匹配规则引擎实现 (pattern-matching rule engine)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索与模式匹配的表达式&lt;/li&gt;
&lt;li&gt;找到匹配项时，重写表达式&lt;/li&gt;
&lt;li&gt;如果没有更多匹配的规则，则停止&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;more-examples&#34;&gt;MORE EXAMPLES&lt;/h2&gt;
&lt;p&gt;前面描述的都是在对关系代数运算符上进行的优化, 接下来将展示一些例子, 来说明系统如何重写查询计划以简化或者避免做无用功.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;INT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不可能 (Impossible) /  不需要 (Unnecessary) 的谓词 (predicates)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2015.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2016.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;Join 淘汰 (Elimination)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2017.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2018.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ignoring Projections&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2019.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2020.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;Merging Predicates&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2021.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2022.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cost-estimation&#34;&gt;Cost Estimation&lt;/h2&gt;
&lt;p&gt;查询需要多长时间?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: 很小的成本; 难以估计&lt;/li&gt;
&lt;li&gt;Disk:  传输的块 (# of block transfers)&lt;/li&gt;
&lt;li&gt;Memory: DRAM 使用数量&lt;/li&gt;
&lt;li&gt;Network: 消息数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多少 tuple 将读写?&lt;/p&gt;
&lt;p&gt;运行每个可能的计划去检查这些信息也很昂贵, 所以数据库需要一种方法来获取这些信息. 例如使用近似的方式..&lt;/p&gt;
&lt;p&gt;一些数据库没有成本模型, 所以他们就执行这些计划, 然后看看哪个先回来... mongodb 似乎在这么做...&lt;/p&gt;
&lt;h2 id=&#34;statistics&#34;&gt;Statistics&lt;/h2&gt;
&lt;p&gt;DBMS 在内部的catalog存储统计信息, 如 tables, attributes 以及 indexes.&lt;/p&gt;
&lt;p&gt;不同系统在不同时间更新他们.&lt;/p&gt;
&lt;p&gt;手动调用 (如通过 SQL）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Posgres／SQLite: ANALYZE&lt;/li&gt;
&lt;li&gt;Oracle / Mysql: ANALYZE TABLE&lt;/li&gt;
&lt;li&gt;SQL Server: UPDATE STATISTICS&lt;/li&gt;
&lt;li&gt;DB2: RUNSTATS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用了这些函数后, 会执行一个顺序扫描, 然后更新统计信息, 可以每天执行定时任务扫描.&lt;/p&gt;
&lt;p&gt;对于每个关系 R, DBMS 维护下面这些信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$N_R$: R 中 tuple 的数量&lt;/li&gt;
&lt;li&gt;$V(A,R)$: 属性A不重复值的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cost-based-query-planning&#34;&gt;Cost-Based Query Planning&lt;/h2&gt;
&lt;p&gt;生成对数据库当前状态下执行特定查询计划的成本估算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;估算只在内部有意义&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cost-model-components&#34;&gt;Cost model Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;选择#1: 物理成本 (Physical Costs)
&lt;ul&gt;
&lt;li&gt;预测CPU周期 (predict cpu cycles), I/O, 缓存未命中 (cache miss), RAM 消耗, 预取等 (pre-fetching) 等...&lt;/li&gt;
&lt;li&gt;严重依赖硬件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择#2: 逻辑成本 (Logical Costs)
&lt;ul&gt;
&lt;li&gt;估计每个运算符的结果集大小&lt;/li&gt;
&lt;li&gt;独立于运算符的算法&lt;/li&gt;
&lt;li&gt;需要对运算符的结果大小进行预估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择#3: 算法成本 (Algorithmic Costs)
&lt;ul&gt;
&lt;li&gt;运算符算法实现的复杂性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disk-based-dbms-cost-model&#34;&gt;Disk-Based DBMS Cost Model&lt;/h3&gt;
&lt;p&gt;磁盘访问数量始终是查询执行时间上的一个大头&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这种情况下, CPU成本可以忽略不计&lt;/li&gt;
&lt;li&gt;必须考虑顺序I/O (sequential I/O) 与随机I/O (random I/O)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 DBMS 能完全控制对 buffer 的管理, 比较容易建模&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们知道 replacement strategy (e.g. LRU, Clock...), pinning 以及假设对磁盘的独占访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;postgres-cost--model&#34;&gt;Postgres Cost  Model&lt;/h3&gt;
&lt;p&gt;使用 CPU 和  I/O 成本的组合, 由  “神奇 (magic)” 的常数因子加权.&lt;/p&gt;
&lt;p&gt;默认设置显然是针对没有大量内存的, 驻留磁盘的数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在内存中处理一个元组比从磁盘读取一个元组快400倍&lt;/li&gt;
&lt;li&gt;顺序I/O 比随机 I/O 快4倍 (在 SSD 下差距应该更大)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/static/runtime-config-query.html&#34;&gt;20.7. Query Planning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/14/Untitled%2023.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ibm-db2-cost-model&#34;&gt;IBM DB2 Cost Model&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系统目录中的数据库特性 (Database characteristics in system catalogs)&lt;/li&gt;
&lt;li&gt;硬件环境（微观基准测试）(Hardware environment (microbenchmarks))&lt;/li&gt;
&lt;li&gt;存储设备特性（微观基准测试）(Storage device characteristics (microbenchmarks))&lt;/li&gt;
&lt;li&gt;通信带宽(仅分布式) (Communications bandwidth (distributed only))&lt;/li&gt;
&lt;li&gt;内存资源（缓冲池，排序堆）(Memory resources (buffer pools, sort heaps) Concurrency Environment)&lt;/li&gt;
&lt;li&gt;并发环境
&lt;ul&gt;
&lt;li&gt;用户的平均数量 (Average number of users)&lt;/li&gt;
&lt;li&gt;隔离级别/阻塞 (Isolation level/blocking)&lt;/li&gt;
&lt;li&gt;可用锁的数量 (Number of available locks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;我们可以使用静态规则和启发式方法来优化查询计划, 而无需了解数据库的内容.&lt;/p&gt;
&lt;p&gt;我们可以使用成本模型来帮助进行更高级的查询优化.&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://algebra2k.github.io/tags/database/">database</category>
                                
                            
                                
                                
                                
                                    <category domain="https://algebra2k.github.io/tags/cmu/">CMU</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CMU 15/445 Notes: 13. Query Execution II</title>
                <link>https://algebra2k.github.io/posts/cmu-15445-query-execution-2/</link>
                <guid isPermaLink="true">https://algebra2k.github.io/posts/cmu-15445-query-execution-2/</guid>
                <pubDate>Fri, 24 Jan 2020 00:00:00 &#43;0000</pubDate>
                
                    <author>jackson.cloudnative@gmail.com (jackson)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;why-care-about-parallel-execution&#34;&gt;Why care about parallel execution?&lt;/h2&gt;
&lt;p&gt;性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高吞吐 (throughout)&lt;/li&gt;
&lt;li&gt;降低延迟 (latency)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提高响应 (responsiveness) 和可用性 (availability)&lt;/p&gt;
&lt;p&gt;Potentially lower total cost of ownership (TCO).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCO 通常是企业衡量数据库成本的方式&lt;/li&gt;
&lt;li&gt;包括机器, 软件, 人工, 运行消耗能源等一系列的成本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;parallel-vs-distributed&#34;&gt;Parallel VS. Distributed&lt;/h2&gt;
&lt;p&gt;database 通过分散多个资源以提高数据库不通的方面.&lt;/p&gt;
&lt;p&gt;让应用程序使用起来向单个实例.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single-resource DBMS 的 sql query 应该在并行或分布式DBMS上得到相同的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;parallel-dbms&#34;&gt;Parallel DBMS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;资源在物理上靠近&lt;/li&gt;
&lt;li&gt;资源使用高速的局域网络通信&lt;/li&gt;
&lt;li&gt;通信总是成本很低且可靠的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;distributed-dbmss&#34;&gt;Distributed DBMSs:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;资源可以分布在不同的机器上 (物理上很远)&lt;/li&gt;
&lt;li&gt;资源使用慢速的互联网络通信&lt;/li&gt;
&lt;li&gt;通信总是高成本且不可靠&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;process-model&#34;&gt;Process Model&lt;/h2&gt;
&lt;p&gt;DBMS 的 process model 定义了系统如何构建以支持多个用户应用程序的并发请求.&lt;/p&gt;
&lt;p&gt;worker 是负责代表客户端执行任务并返回结果的 DBMS 组件.&lt;/p&gt;
&lt;h3 id=&#34;process-per-dbms-worker&#34;&gt;Process per DBMS Worker&lt;/h3&gt;
&lt;p&gt;每一个 Worker 是一个单独的操作系统进程.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖操作系统调度&lt;/li&gt;
&lt;li&gt;将共享内存 (shared-memory) 用于全局数据结构&lt;/li&gt;
&lt;li&gt;一个进程崩溃 (crash) 不会导致整个系统崩溃&lt;/li&gt;
&lt;li&gt;例如: IBM DB2, Postgres, Oracle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端连接到服务器, 服务器中有一个 dispatcher 的家伙 &lt;code&gt;fork&lt;/code&gt; 一个 worker 进程&lt;/li&gt;
&lt;li&gt;客户端和这个 worker 进程之间通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个 worker 都有一个 buffer pool, 不希望 page 来回复制, 希望共享这些 page&lt;/li&gt;
&lt;li&gt;需要使用共享内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么不使用线程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;之前的很多数据库系统在开发时并没有标准的线程 &lt;code&gt;API&lt;/code&gt; (例如 POSIX）&lt;/li&gt;
&lt;li&gt;进程是每个操作系统都有的模型，进程模型的数据库可以在任何系统上使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;process-pool&#34;&gt;Process Pool&lt;/h3&gt;
&lt;p&gt;Worker  使用进程池中任意一个空闲进程.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也依赖操作系统调度和共享内存&lt;/li&gt;
&lt;li&gt;对CPU缓存局部性 (cache locality) 不友好&lt;/li&gt;
&lt;li&gt;例如: IBM DB2, Postgres (2015)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%201.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比进程模型, 进程池模型可以提前 &lt;code&gt;fork&lt;/code&gt; 很多进程,  dispatcher 可以选择其中某个 &lt;code&gt;free&lt;/code&gt; 的进程, &lt;code&gt;fork&lt;/code&gt; 还是有很大开销的&lt;/li&gt;
&lt;li&gt;可以为不同的进程设置优先级 (例如linux 下的 &lt;code&gt;nice&lt;/code&gt; ), 但在较高级别上无法干预操作系统调度进程&lt;/li&gt;
&lt;li&gt;高端的系统还会使用工作窃取模型 (worker stealing). 在这种系统会存在一个队列, 空闲的进程可以从这个队列获取其他进程的任&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thread-per--dbms-worker&#34;&gt;Thread per  DBMS Worker&lt;/h3&gt;
&lt;p&gt;单个进程与多个 worker 线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBMS 需要自己管理调度&lt;/li&gt;
&lt;li&gt;可能会也可能不会使用调度线程 (dispatcher thread)&lt;/li&gt;
&lt;li&gt;线程崩溃 (crash) 可能会导致整个系统崩溃&lt;/li&gt;
&lt;li&gt;例如: IBM DB2, MSSQL, MySQL, Oracle (2014)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%202.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用多线程架构 (multi-threaded architecture) 有几个优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个上下文切换的开销更小&lt;/li&gt;
&lt;li&gt;不必管理共享内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;thread per worker 模型并不意味着 DBMS 支持查询内 (intra-query) 并行&lt;/p&gt;
&lt;p&gt;Andy 不知道过去 10 年有任何新的 DBMS 不使用线程，除非它们是 Postgres 分支。&lt;/p&gt;
&lt;h3 id=&#34;scheduling&#34;&gt;Scheduling&lt;/h3&gt;
&lt;p&gt;对于每个查询计划 (Query plan) 决定在哪里, 什么时候以及如何执行它.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应该使用多少个任务?&lt;/li&gt;
&lt;li&gt;哪些任务应该执行以及哪些任务应该暂停?&amp;gt;&lt;/li&gt;
&lt;li&gt;应该使用多少个CPU Core?&lt;/li&gt;
&lt;li&gt;任务应该在哪个CPU Core上执行?&lt;/li&gt;
&lt;li&gt;任务应该在哪里存储它的输出?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DBMS 总是比操作系统知道的多.&lt;/p&gt;
&lt;h2 id=&#34;inter---vs-intra---query-parallelism&#34;&gt;Inter - Vs. Intra - Query Parallelism&lt;/h2&gt;
&lt;p&gt;Inter-Query: 不同的查询并发执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提升吞吐和减少延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Intra-Query: 单个查询内的运算 (operation) 并行执行.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少长时间运行的查询的延迟.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;inter---query-parallelism&#34;&gt;Inter - Query Parallelism&lt;/h3&gt;
&lt;p&gt;通过允许同时执行多个查询来提高整体性能.&lt;/p&gt;
&lt;p&gt;如果查询是只读的, 那么在并行执行多个查询时几乎不需要做额外的协调&lt;/p&gt;
&lt;p&gt;但是如果多个查询同时更新数据库, 这么很难正确执行......&lt;/p&gt;
&lt;h3 id=&#34;intra---query-parallelism&#34;&gt;Intra - Query Parallelism&lt;/h3&gt;
&lt;p&gt;通过并行执行运算符 (operator) 来提高单个查询的性能&lt;/p&gt;
&lt;p&gt;从生产者/消费者 (producer/consumer) 角度考虑如何组织运算符 (operator)&lt;/p&gt;
&lt;p&gt;每个关系运算符 (relational operator) 都有并行算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以让多个线程访问集中式的数据结构, 也可以使用分区来划分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;intra---query-parallelism-1&#34;&gt;Intra - Query Parallelism&lt;/h2&gt;
&lt;h3 id=&#34;parallel-grace-hash-join&#34;&gt;Parallel GRACE Hash Join&lt;/h3&gt;
&lt;p&gt;分区后,  使用单独的 worker 为每个 R 和 S 的级别的bucket执行 Join.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%203.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%204.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;approach-1-intra-operator-parallelism-horizontal&#34;&gt;Approach #1: Intra-Operator Parallelism (Horizontal)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将运算符 (operator) 分解为独立的i子任务段(fragments), 这些段对不同的数据子集执行相同的功能.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库插入 exchange 运算符到查询计划以从子运算符 (children operators) 聚合结果.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%205.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%206.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%207.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%208.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%209.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2010.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在这个示例中只是盲目的获取数据&lt;/li&gt;
&lt;li&gt;可以对数据预分区, 例如第一个worker在1, 2,3 操作, 第二个worker 在4, 5, 6上操作&lt;/li&gt;
&lt;li&gt;也可以基于理解语义, 例如如果这是一个较小的表, 所有的数据只有1000, 使用一个线程处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exchange-operator&#34;&gt;Exchange Operator&lt;/h3&gt;
&lt;p&gt;Exchange Type #1 -Gather&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合并从多个worker获得的结果到单个 output stream&lt;/li&gt;
&lt;li&gt;查询计划根节点必须总是 gather exchange.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exchange Type #2 – Repartition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过多个output stream 重新组织为多个input stream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exchange Type #3 – Distribute&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拆分单个 input strem 到 多个 output stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;intra-operator-parallelsim&#34;&gt;Intra-Operator Parallelsim&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2011.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2012.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2013.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2014.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2015.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2016.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2017.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2018.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;approach-2-inter-operator-parallelism-vertical&#34;&gt;Approach #2: Inter-Operator Parallelism (Vertical)&lt;/h3&gt;
&lt;p&gt;操作是重叠的 (overlapped) , 以便将 pipeline 数据从一个阶段传递到下一个非物化(materialization) 的阶段.&lt;/p&gt;
&lt;p&gt;也称为流水线并行 (pipelined parallelism)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2019.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2020.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2021.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;approach-3-bushy-parallelism&#34;&gt;Approach #3: Bushy Parallelism&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;inter-operator 并行的扩展, 其中 worker 从不同的查询计划的 segments 在同一时间执行不多个 operator.&lt;/li&gt;
&lt;li&gt;仍然需要 exchange 操作符合并来自 segements 的中间结果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2022.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;observation&#34;&gt;Observation&lt;/h2&gt;
&lt;p&gt;如果磁盘始终是主要的瓶颈, 使用额外的进程或线程也没效果.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果每个 worker 读取磁盘不同的 segments, 情况更糟糕&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;io-parallelism&#34;&gt;I/O Parallelism&lt;/h2&gt;
&lt;p&gt;Split the DBMS installation across multiple storage devices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Disks per Database&lt;/li&gt;
&lt;li&gt;One Database per Disk&lt;/li&gt;
&lt;li&gt;One Relation per Disk&lt;/li&gt;
&lt;li&gt;Split Relation across Multiple Disks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multi-disk-parallelism&#34;&gt;Multi-Disk Parallelism&lt;/h3&gt;
&lt;p&gt;配置操作系统或硬件以跨多个设存储设备存储 DBMS 的文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storage Appliances&lt;/li&gt;
&lt;li&gt;RAID Configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些对DBMS来说是透明的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2023.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2024.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;database-partitioning&#34;&gt;Database Partitioning&lt;/h3&gt;
&lt;p&gt;一些 DBMS 允许为每个数据库单独指定磁盘位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BufferPoolManager 将 page  映射到磁盘位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 DBMS 将每个数据库存储在单独的目录中，在文件系统级别也很容易做到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志文件可能被共享&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;partitioning&#34;&gt;Partitioning&lt;/h3&gt;
&lt;p&gt;将单个logical table 拆分为不相交的 physical segments, 分别存储和管理.&lt;/p&gt;
&lt;p&gt;分布式系统中很多的想法都来自 Partitioning&lt;/p&gt;
&lt;p&gt;理想情况下, 分区对应用程序是透明的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序访问 logical table 并不需要关心是如何存储对&lt;/li&gt;
&lt;li&gt;在分布式 DBMS 中并非总是如此。(例如 join)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vertical-partitioning&#34;&gt;Vertical Partitioning&lt;/h3&gt;
&lt;p&gt;存储 table 的属性在单独的位置 (e.g. file, disk volume)&lt;/p&gt;
&lt;p&gt;必须存储tuple信息以重建原始记录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2025.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2026.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2027.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果应用查询的是 attr1,...attr3 列的数据, 速度会得到明显的提升, 因为只在读取相应的数据&lt;/li&gt;
&lt;li&gt;但是如果需要读取 partition #2 的数据, 需要合并起来, 那就必须要获取原始的tuple信息以重建&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;horizontal-partitioning&#34;&gt;Horizontal Partitioning&lt;/h3&gt;
&lt;p&gt;基于某些 partitioning key 将 table 的 tuple 划分为不相交的 segments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hash partitioning&lt;/li&gt;
&lt;li&gt;range partitioning&lt;/li&gt;
&lt;li&gt;predicate partitioning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2028.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://algebra2k.github.io/images/cmu15445/13/Untitled%2029.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;并行执行很重要&lt;/li&gt;
&lt;li&gt;几乎每个数据库都支持它&lt;/li&gt;
&lt;li&gt;做对很难
&lt;ul&gt;
&lt;li&gt;Coordination Overhead&lt;/li&gt;
&lt;li&gt;Scheduling&lt;/li&gt;
&lt;li&gt;Concurrency Issues&lt;/li&gt;
&lt;li&gt;Resource Contention&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://algebra2k.github.io/tags/database/">database</category>
                                
                            
                                
                                
                                
                                    <category domain="https://algebra2k.github.io/tags/cmu/">CMU</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>UDP编程模型基础</title>
                <link>https://algebra2k.github.io/posts/udp-programming-model/</link>
                <guid isPermaLink="true">https://algebra2k.github.io/posts/udp-programming-model/</guid>
                <pubDate>Wed, 01 Mar 2017 00:00:00 &#43;0000</pubDate>
                
                    <author>jackson.cloudnative@gmail.com (jackson)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;在编写UDP网络程序时，和编写TCP的网络程序有本质差异，其区别在于UDP是&lt;strong&gt;无连接&lt;/strong&gt;、&lt;strong&gt;不可靠&lt;/strong&gt;的传输协议。
当然相信这句话你可能已经听烂了，UDP不会建立连接（也可以调用&lt;code&gt;connect&lt;/code&gt;），因此UDP的数据传输不是字节流，而是数据报。
字节流就像水管一样源源不断的流向另一端，而数据包就像携带数据的 “包裹” 一样，发出去就结束了。理解在进行数据传输时，UDP和TCP以不同的形式传输有助于我们
编写UDP网络程序。&lt;/p&gt;
&lt;h2 id=&#34;udp编程模型套路&#34;&gt;UDP编程模型（套路）&lt;/h2&gt;
&lt;p&gt;和TCP一样，在编写UDP程序时，也遵循一些模型（套路），也就是内核提供的相关的系统调用
&lt;img src=&#34;https://algebra2k.github.io/images/udp-model.png&#34; alt=&#34;UDP基础编程模型.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图展示了一个非常基础的UDP编程模型
服务端（server）会有以下步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;socket&lt;/code&gt; 系统调用创建socket文件描述符&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;bind&lt;/code&gt;系统调用绑定IP地址和端口，IP地址和端口应该是众所周知的&lt;/li&gt;
&lt;li&gt;进入主循环, 调用&lt;code&gt;recvfrom&lt;/code&gt; 系统调用等待client发送请求&lt;/li&gt;
&lt;li&gt;等到client发送请求，处理请求，之后调用 &lt;code&gt;sendto&lt;/code&gt;应答&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户端（client）会有以下步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;socket&lt;/code&gt; 系统调用创建socket文件描述符&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;sendto&lt;/code&gt;系统调用像server发送请求&lt;/li&gt;
&lt;li&gt;等待server回复&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;close&lt;/code&gt; 关闭文件描述符（实际是释放socket创建的文件描述符，并不是真正的连接）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，UDP的模型中，并不像TCP建立连接，进行三次握手，然后保持连接进行双方通信，更像一来一回的方式通信。&lt;/p&gt;
&lt;h2 id=&#34;recvfrom-和-sendto-函数&#34;&gt;recvfrom 和 sendto 函数&lt;/h2&gt;
&lt;p&gt;在前面描述的UDP编程中，提到了两个新的函数 &lt;code&gt;recvfrom&lt;/code&gt; 和 &lt;code&gt;sendto&lt;/code&gt;, 来看一下这两个函数在linux中的定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addrlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;recvfrom&lt;/code&gt; 函数用于从面向无连接 (UDP) 的&lt;code&gt;socket&lt;/code&gt; 接收信息。
该函数的参数理解如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;int sockfd&lt;/code&gt; socket函数创建的文件描述符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void *buf&lt;/code&gt;  接收到的数据会写入到buf中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size_t len&lt;/code&gt; 指明&lt;code&gt;buf&lt;/code&gt;的大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int flags&lt;/code&gt; 我们在后续的高级UDP编程中讨论，暂时使用 &lt;code&gt;0&lt;/code&gt; 值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct sockaddr *src_addr&lt;/code&gt; 发送方的信息会保存到该参数中，并随着调用一起返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socklen_t *addrlen&lt;/code&gt;  发送方的信息地址的长度会保存到该参数中，并随着调用一起返回&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ssize_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addrlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;sendto&lt;/code&gt; 函数像从面向无连接 (UDP) 的&lt;code&gt;socket&lt;/code&gt; 发送信息。
该函数的参数理解如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;int sockfd&lt;/code&gt; socket函数创建的文件描述符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const  void *buf&lt;/code&gt;  发送的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size_t len&lt;/code&gt; 指明发送数据&lt;strong&gt;实际的大小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int flags&lt;/code&gt; 我们在后续的高级UDP编程中讨论，暂时使用 &lt;code&gt;0&lt;/code&gt; 值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const  struct sockaddr *dest_addr&lt;/code&gt; 要发送的目的地的地址结构&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socklen_t *addrlen&lt;/code&gt;  指明该地址结构的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;recvfrom&lt;/code&gt; 和  &lt;code&gt;sendto&lt;/code&gt; 在参数上结构上类似，需要注意的是 &lt;code&gt;recvfrom&lt;/code&gt;的 &lt;code&gt;void *buf&lt;/code&gt; 并不是const类型的，其原因是需要拷贝数据到该buf中，而在&lt;code&gt;sendto&lt;/code&gt;中则是const类型的，是因为该数据内核只需要读取并发送给对方。
&lt;code&gt;recvfrom&lt;/code&gt; 中的 &lt;code&gt;socklen_t *addrlen&lt;/code&gt; 是一个指针类型，因为函数调用在&lt;strong&gt;返回发送发地址&lt;/strong&gt;的时候会往该参数中写入长度。
&lt;code&gt;recvfrom&lt;/code&gt; 中的 &lt;code&gt;struct sockaddr *src_addr, socklen_t *addrlen&lt;/code&gt; 这两个参数为空，为空表示接收者不关心发送方的地址信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送长度为0的数据报&lt;/strong&gt;
发送为0的数据报在UDP中是可行的，这样的数据包只会包含**IP首部（ipv4 20字节 ipv6 40字节）**和 &lt;strong&gt;UDP首部（8字节）&lt;/strong&gt; 。
这就意味着对于&lt;code&gt;recvfrom&lt;/code&gt; 返回0值是可以的，但对于 TCP来说，&lt;code&gt;read&lt;/code&gt;返回0值意味着对端已经关闭连接。&lt;/p&gt;
&lt;h2 id=&#34;udp-server&#34;&gt;UDP Server&lt;/h2&gt;
&lt;p&gt;在了解了UDP编程所须的基础后，下面简单的写一个 &lt;code&gt;udp echo server&lt;/code&gt;, 该server接收客户端发送的数据报，并 &lt;code&gt;echo&lt;/code&gt; 回去，下面是 &lt;code&gt;udp server&lt;/code&gt;的实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;udp.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_echo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;create socket error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;htonl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INADDR_LOOPBACK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;htons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SERV_PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bind error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;_dg_echo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_echo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该程序并不像 TCP 那样通过 &lt;code&gt;fork&lt;/code&gt; 、&lt;code&gt;select&lt;/code&gt;、&lt;code&gt;pthread&lt;/code&gt;等手段变成并发服务器，它是一个迭代服务器，大多数情况下UDP服务器也都是迭代的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client&lt;/code&gt;端代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;udp.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;udpc &amp;lt;ipv4&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;htons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SERV_PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;inet_pton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;create sock error&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;udp.h&lt;/code&gt;代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define SERV_PORT 3123
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define MAXLINE 1024
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;UDP缓冲区&lt;/strong&gt;
上述的代码，UDP层实际上是隐含排队的。对于每个套接字，它会有一个接收缓冲区，&lt;code&gt;sendto&lt;/code&gt;发出的UDP数据报都会进入该缓冲区，该缓冲区是一个 FIFO的模式，当缓冲区满时，&lt;code&gt;sendto&lt;/code&gt;发出的数据报会被丢弃，&lt;code&gt;recvfrom&lt;/code&gt; 会从缓冲区获取数据报。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缓冲区是有大小限制的，但也是可以调整的，关于如何调整大小，在后续介绍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据报丢失&lt;/strong&gt;
我们前面的代码中，如果&lt;code&gt;_dg_cli&lt;/code&gt; 函数中 &lt;code&gt;sendto&lt;/code&gt; 发送的数据报丢失了，那么客户端将一直阻塞在 &lt;code&gt;recvfrom&lt;/code&gt;中。如果客户端发送数据报到服务端了，但服务端的 &lt;code&gt;sendto&lt;/code&gt;丢失了，客户端还是会阻塞在 &lt;code&gt;recvfrom&lt;/code&gt;中，一种解决办法是为&lt;code&gt;recvfrom&lt;/code&gt;增加&lt;strong&gt;超时时间&lt;/strong&gt;，但这不是一个完整的解决方式，因为无法弄清是客户端没有发送数据报还是服务端应答丢失了。&lt;/p&gt;
&lt;h2 id=&#34;udp中的一些问题&#34;&gt;UDP中的一些问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;需要验证服务端的应答&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么需要验证服务端的应答呢？因为UDP是无连接的，客户端可能收到其他客户端发来的数据报，这样就影响了正常的服务端应答，我们可以记住服务端的应答，忽略其他。
因此客户端代码修改如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// udp_cli_02.c
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;udp.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;udpc &amp;lt;ipv4&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;htons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SERV_PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;inet_pton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;create sock error&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_replay_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_replay_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_replay_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;server reply ignored.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的客户端程序相比前面的程序从&lt;code&gt;recvfrom&lt;/code&gt;拿到了服务端发送的地址，然后与之前的服务端地址进行比较，如果不同则忽略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异步错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假如调用&lt;code&gt;sendto&lt;/code&gt;往一个已关闭的客户端发送信息会怎么样?
会引起一个&lt;strong&gt;异步错误&lt;/strong&gt;，服务端会响应一个&lt;code&gt;port unreachable&lt;/code&gt; 的ICMP消息，该消息是由&lt;code&gt;sendto&lt;/code&gt;造成的，错误原因是因为在发送数据包之前， 会调用ARP信息获取对端的&lt;code&gt;mac&lt;/code&gt;地址，但由于服务器已经关闭，因此会得到一个&lt;strong&gt;端口不可达&lt;/strong&gt;的ICMP消息。
尽管这个错误是由&lt;code&gt;sendto&lt;/code&gt;引起，但&lt;code&gt;sendto&lt;/code&gt;不会返回错误信息，&lt;code&gt;sendto&lt;/code&gt;实际上返回的成是&lt;strong&gt;在缓冲区队列形成IP数据报的空间&lt;/strong&gt;的成功。而ICMP消息后续才到来，这也是说异步错误的原因所在。&lt;/p&gt;
&lt;h2 id=&#34;udp的connect函数&#34;&gt;UDP的connect函数&lt;/h2&gt;
&lt;p&gt;UDP的&lt;code&gt;connect&lt;/code&gt; 不同于 TCP的connect函数，它没有三次握手过程，但可以检查到&lt;strong&gt;异步错误（例如端口不可达）&lt;/strong&gt;
在UDP使用了&lt;code&gt;connect&lt;/code&gt;之后，和之前的UDP程序编写可能不同，不需要在调用&lt;code&gt;sendto&lt;/code&gt; 了，因为已经指定好了地址和端口号，而是要改用 &lt;code&gt;send&lt;/code&gt;和&lt;code&gt;write&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但还是可以使用 &lt;code&gt;sendto&lt;/code&gt;，只是&lt;code&gt;sendto&lt;/code&gt;的 第五个参数目的地地址为空指针，目的地地址长度为0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于&lt;code&gt;recvfrom&lt;/code&gt;，要改用 &lt;code&gt;recv&lt;/code&gt;，&lt;code&gt;read&lt;/code&gt;或&lt;code&gt;recvmsg&lt;/code&gt;。
对于调用 &lt;code&gt;connect&lt;/code&gt; 的UDP连接来说，内核会限制该UDP套接字只能与它连接的对端交换数据，对于其他端发送的数据会忽略。
下面我们用connect改写之前的客户端程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;udp.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// extern int errno;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;udpc &amp;lt;ipv4&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;htons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SERV_PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;inet_pton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sin_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;create sock error&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

   


    &lt;span class=&#34;n&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sockfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_dg_cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;connect error: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;write error: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;read error: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        
        &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码使用了 &lt;code&gt;connect&lt;/code&gt; 连接UDP，之后使用 &lt;code&gt;read&lt;/code&gt; &lt;code&gt;write&lt;/code&gt; 读写，如果对端服务器关闭，我们在&lt;code&gt;write&lt;/code&gt;的时候会得到 &lt;code&gt;Connection refused&lt;/code&gt; 错误。&lt;/p&gt;
&lt;h2 id=&#34;udp丢包问题&#34;&gt;UDP丢包问题&lt;/h2&gt;
&lt;p&gt;修改了之前客户端 &lt;code&gt;_dg_cli&lt;/code&gt; 代码，让客户端每次发送1400byte的数据，发送10w次，同时修改客户端代码，统计&lt;code&gt;recvfrom&lt;/code&gt;接收到的数据条目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// _dg_cli
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_serv_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serv_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sendto error: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// udp_serv_02.c
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;recvfrom_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; 
&lt;span class=&#34;nf&#34;&gt;_dg_echo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvfrom_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;socklen_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(;;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_addr_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recv_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_cli_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;recvfrom_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;received %d datagrams&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们启动客户端和服务端程序，得到结果如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  udp ./udps                                                                                                                                                                   
 ^Creceived &lt;span class=&#34;m&#34;&gt;98182&lt;/span&gt; datagrams
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现出现了丢包，因为UDP是无连接的，属于不稳定的传输协议，当接收套接字的接收队列已满数据报就会被丢弃。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;netstat -s -p udp&lt;/code&gt; 可以查看UDP发送数据包的情况&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我们首先介绍了基本的UDP编程步骤，UDP不同于TCP，不需要建立连接，只需要对方地址交换数据报&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP可以发送长度为0的数据报，这就意味着接收端读到0字节是合法的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP在往一个已关闭的服务器发送数据时不会出错，因为这个错误时异步的错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP也可以调用&lt;code&gt;connect&lt;/code&gt;，不过这不同于TCP，UDP调用该函数后只能与指定的端进行通信，同时可以调用 &lt;code&gt;read&lt;/code&gt;，&lt;code&gt;write&lt;/code&gt;等函数来收发数据，同时可以立即接收到异步错误，比如端口不可达，&lt;code&gt;connect&lt;/code&gt;一般由客户端调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP容易丢包，一旦缓冲区队列已满，UDP会丢弃发送的数据报&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://algebra2k.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/">网络编程</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://algebra2k.github.io/tags/udp/">UDP</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
